(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{369:function(s,n,t){"use strict";t.r(n);var a=t(44),e=Object(a.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"第八章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第八章"}},[s._v("#")]),s._v(" 第八章")]),s._v(" "),t("p",[t("em",[t("strong",[s._v("多态")])]),s._v("     相当于是函数的重载。")]),s._v(" "),t("blockquote",[t("p",[s._v("重载为类的非静态成员函数；")]),s._v(" "),t("p",[s._v("重载为非函数成员。")])]),s._v(" "),t("ul",[t("li",[s._v("重载之后运算符的优先级和结合性都不会改变。")])]),s._v(" "),t("p",[t("strong",[s._v("重载为类成员的运算符函数定义形式：")])]),s._v(" "),t("div",{staticClass:"language-c++ line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("函数类型 operator 运算符(形参){\n······\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("参数个数 = 原操作数个数 -1(后置++，--除外)")]),s._v(" "),t("p",[t("strong",[s._v("前置单目运算符重载规则")])]),s._v(" "),t("ul",[t("li",[s._v("如果要重载U 为类成员函数，使之能够实现表达式"),t("code",[s._v("U oprd")]),s._v(" ，其中 "),t("code",[s._v("oprd")]),s._v(" 为A类对象，则U应被重载为A类的成员函数，无形参。")]),s._v(" "),t("li",[s._v("经重载后，表达式"),t("code",[s._v("U oprd")]),s._v(" ，相当于 "),t("code",[s._v("oprd.operator U()")])])]),s._v(" "),t("p",[t("strong",[s._v("后置单目运算符 ++ 和-- 重载运算规则")])]),s._v(" "),t("ul",[t("li",[s._v("如果要重载++ 或-- 为类成员函数，使之能够实现表达式"),t("code",[s._v("oprd ++")]),s._v(" 或"),t("code",[s._v("oprd --")]),s._v(" ，其中"),t("code",[s._v("oprd")]),s._v(" 为A类对象，则++ 或-- 应被重载为A类的成员函数，切具有一个int类型形参。")]),s._v(" "),t("li",[s._v("经重载后，表达式"),t("code",[s._v("oprd ++")]),s._v(" 相当于 "),t("code",[s._v("oprd.operator ++(0)")])])]),s._v(" "),t("p",[s._v("例：重载前置++ 和后置++ 为时钟类成员函数")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("前置单目运算符吗，重置函数没有形参")])]),s._v(" "),t("li",[t("p",[s._v("后置++ 运算符，重载函数需要有一个int形参")])]),s._v(" "),t("li",[t("p",[s._v("操作数是时针类的对象")])]),s._v(" "),t("li",[t("p",[s._v("实现时间增加1秒")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('#include<iostream>\n#include<stdlib.h>\nusing namespace std;\nclass Clock {\nprivate:\n\tint hour, minute, second;\npublic:\n\tClock(int hour = 0, int minute = 0, int second = 0);\n\tvoid showTime() const;\n\tClock & operator++();\n\tClock operator ++ (int);\n};\nClock::Clock(int hour, int minute, int second) {\n\tif (0 <= hour && hour < 24 && 0 <= minute && minute < 60 && 0 <= second && second < 60) {\n\t\tthis->hour = hour;\n\t\tthis->minute = minute;\n\t\tthis->second = second;\n\t}\n\telse {\n\t\tcout << "Time error!" << endl;\n\t}\n}\nvoid Clock::showTime() const {\n\tcout << hour << ": " << minute << ": " << second << endl;\n}\nClock&Clock::operator++() {\n\tsecond++;\n\tif (second >= 60) {\n\t\tsecond -= 60;\n\t\tminute++;\n\t\tif (minute >= 60) {\n\t\t\tminute -= 60;\n\t\t\thour = (hour + 1) % 24;\n\t\t}\n\t}\n\treturn *this;\n}\nClock Clock::operator++(int) {\n\tClock old = *this;\n\t++(*this);\n\treturn old;\n}\nint main() {\n\tClock myClock(23, 59, 59);\n\tcout << "First time output: ";\n\tmyClock.showTime();\n\tcout << "Show myClock ++: ";\n\t(myClock++).showTime();\n\tcout << endl << endl;\n\tsystem("pause");\n\treturn 0;\n}\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br")])])])]),s._v(" "),t("h2",{attrs:{id:"运算符重载为类外的非成员函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运算符重载为类外的非成员函数"}},[s._v("#")]),s._v(" 运算符重载为类外的非成员函数")]),s._v(" "),t("p",[s._v("规则：")]),s._v(" "),t("ul",[t("li",[s._v("函数的形参代表依自左向右次序排列的各操作数")]),s._v(" "),t("li",[s._v("重载为非成员函数时：\n"),t("ul",[t("li",[s._v("参数个数 = 原操作数个数（后置++ ，--除外）")]),s._v(" "),t("li",[s._v("至少应该有一个自定义类型的参数")])])]),s._v(" "),t("li",[s._v("后置单目运算符 ++ 和-- 的重载函数，形参列表中要增加一个int，但不必谢形参名。")]),s._v(" "),t("li",[s._v("如果在运算符的重载函数中需要操作某类对象的私有成员，可以将此函数生命为该类的友元。")]),s._v(" "),t("li",[s._v("双目运算符B重载后，表达式"),t("code",[s._v("oprd1 B oprd2")]),s._v(" 等同于"),t("code",[s._v("operator B(operd1,oprd2)")])]),s._v(" "),t("li",[s._v("前置单目运算符B重载后，表达式"),t("code",[s._v("B oprd")]),s._v(" 等同于"),t("code",[s._v("operator B (oprd)")])]),s._v(" "),t("li",[s._v("后置单目运算符++ 和-- 重载后，表达式"),t("code",[s._v("oprd B")]),s._v(" 等同于"),t("code",[s._v("operator B(oprd,0)")])])]),s._v(" "),t("p",[t("strong",[s._v("例：")]),s._v(' 重载Complex的加减法和"<<" 运算符为非成员函数')]),s._v(" "),t("ul",[t("li",[t("p",[s._v("将+ -(双目) 重载为非成员函数，并将其声明为复数类的友元，两个操作数都是复数类的常饮用。")])]),s._v(" "),t("li",[t("p",[s._v("将<<(双目) 重载为非成员函数，并将其声明为复数类的友元，它的左操作数是"),t("code",[s._v("std::ostream")]),s._v("引用，右操作数为复数类的常引用，返回"),t("code",[s._v("std::ostream")]),s._v("引用，用以支持下面形式的输出")]),s._v(" "),t("blockquote",[t("p",[s._v("cout << a << b;")])]),s._v(" "),t("p",[s._v("该输出调用的是：")]),s._v(" "),t("blockquote",[t("p",[s._v("operator << (operator << (cout ,a),b);")])])])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("#include<iostream>\n#include<stdlib.h>\nusing namespace std;\nclass Complex {\nprivate:\n\tdouble real;\n\tdouble imag;\npublic:\n\tComplex\n};\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h2",{attrs:{id:"虚函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#虚函数"}},[s._v("#")]),s._v(" 虚函数")]),s._v(" "),t("p",[s._v("什么函数可以是虚函数")]),s._v(" "),t("ul",[t("li",[s._v("一般成员函数可以是虚函数")]),s._v(" "),t("li",[s._v("构造函数不能是虚函数")]),s._v(" "),t("li",[s._v("析构函数可以是虚函数")])]),s._v(" "),t("p",[t("strong",[s._v("一般虚函数成员")])]),s._v(" "),t("ol",[t("li",[t("p",[s._v("声明：")]),s._v(" "),t("p",[t("code",[s._v("virtual 函数类型 函数名 (形参表);")])])]),s._v(" "),t("li",[t("p",[s._v("虚函数声明只能出现在类定义中的函数原型声明中，而不能在成员函数实现的时候。")])]),s._v(" "),t("li",[t("p",[s._v("在派生类中可以对基类中的成员函数进行覆盖。")])]),s._v(" "),t("li",[t("p",[s._v("虚函数一般不声明为内联函数，因为对虚函数的调用需要动态绑定，而对内联函数的处理室静态的。")])])]),s._v(" "),t("p",[t("strong",[s._v("virtual 关键字")])]),s._v(" "),t("ul",[t("li",[s._v("派生类可以不显式地用virtual声明虚函数，这时系统就会用以下\n规则来判断派生类的一个函数成员是不是虚函数:\n"),t("ul",[t("li",[s._v("该函数是否与基类的虚函数有相同的名称、参数个数及对应参数类型;")]),s._v(" "),t("li",[s._v("该函数是否与基类的虚函数有相同的返回值或者满足类型兼容规则的指针、引用型的返回值;")])])]),s._v(" "),t("li",[s._v("如果从名称、参数及返回值三个方面检查之后，派生类的函数满足上述条件，就会自动确定为虚函数。这时,派生类的虚函数便覆盖了基类的虚函数。")]),s._v(" "),t("li",[s._v("派生类中的虚函数还会隐藏基类中同名函数的所有其它重载形式。")]),s._v(" "),t("li",[s._v("一般习惯于在派生类的函数中也使用virtual关键字，以增加程序的可读性。")])]),s._v(" "),t("p",[t("strong",[s._v("纯虚函数")])]),s._v(" "),t("ul",[t("li",[s._v("纯虚函数是一个在基类中声明的虚函数，它在该基类中没有定义具体的操作内容，要求各派生类根据实际需要定义自己的版本，纯虚函数的声明格式为: "),t("code",[s._v("virtual函数类型函数名(参数表) = 0;")])])]),s._v(" "),t("p",[t("strong",[s._v("抽象类作用")]),s._v("(具有纯虚函数的类)")]),s._v(" "),t("ul",[t("li",[s._v("将有关的数据和行为组织在一个继承层次结构中，保证派生类具有要求的行为。对于暂时无法实现的函数，可以声明为纯虚函数,留给派生类去实现。")]),s._v(" "),t("li",[s._v("对于暂时无法实现的函数，可以声明为纯虚函数,留给派生类去实现。")])]),s._v(" "),t("p",[t("strong",[s._v("注意")])]),s._v(" "),t("ul",[t("li",[s._v("抽象类只能作为基类来使用。")]),s._v(" "),t("li",[s._v("不能定义抽象类的对象。")])]),s._v(" "),t("p",[t("strong",[s._v("override")])]),s._v(" "),t("ul",[t("li",[s._v("多态行为的基础:基类声明虚函数，派生类声明一个原型完全一样的函数覆盖该虚函数;")]),s._v(" "),t("li",[s._v("覆盖要求:函数签名( signature )完全一致。")]),s._v(" "),t("li",[s._v("函数签名包括: "),t("code",[s._v("函数名 参数列表 const")])])]),s._v(" "),t("h1",{attrs:{id:"第九章"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第九章"}},[s._v("#")]),s._v(" 第九章")]),s._v(" "),t("h2",{attrs:{id:"函数模板定义语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#函数模板定义语法"}},[s._v("#")]),s._v(" 函数模板定义语法")]),s._v(" "),t("p",[s._v("形式:")]),s._v(" "),t("blockquote",[t("p",[s._v("template <模板参数表>")]),s._v(" "),t("p",[s._v("函数定义")])]),s._v(" "),t("p",[s._v("模板参数表的内容")]),s._v(" "),t("ul",[t("li",[s._v("类型参数：class(或typename) 标识符")]),s._v(" "),t("li",[s._v("常量参数：类型说明符 标识符")]),s._v(" "),t("li",[s._v("模板参数：template<参数表> class 标识符")])]),s._v(" "),t("blockquote",[t("p",[s._v("注意：")]),s._v(" "),t("ul",[t("li",[s._v("一个函数模板并非刻意处理所有类型的数据")]),s._v(" "),t("li",[s._v("只有能够进行函数模板中运算的类型，可以作为类型实参")]),s._v(" "),t("li",[s._v("自定义的类，需要重载模板中的运算符，才能作为类型实参")])])]),s._v(" "),t("p",[t("strong",[s._v("类模板的作用")]),s._v("\n使用类模板使用户可以为类声明一种模式，使得类中的某些数据成员、某些成员函数的参数、某些成员函数的返回值,能取任意类型(包括基本类型的和用户自定义类型)")]),s._v(" "),t("h2",{attrs:{id:"类模板"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#类模板"}},[s._v("#")]),s._v(" 类模板")]),s._v(" "),t("p",[t("strong",[s._v("声明")])]),s._v(" "),t("blockquote",[t("p",[s._v("template<模板参数表>")]),s._v(" "),t("p",[s._v("class类名{")]),s._v(" "),t("p",[s._v("​    类成员声明")]),s._v(" "),t("p",[s._v("}")])]),s._v(" "),t("p",[s._v("如果需要在类模板以外定义其成员函数，则要采用以下的形式：")]),s._v(" "),t("blockquote",[t("p",[s._v("template<模板参数表>")]),s._v(" "),t("p",[s._v("类型名    类名    <模板参数标识符列表>::函数名(参数表)")])])])}),[],!1,null,null,null);n.default=e.exports}}]);