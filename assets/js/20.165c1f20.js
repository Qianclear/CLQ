(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{380:function(a,v,t){"use strict";t.r(v);var _=t(44),s=Object(_.a)({},(function(){var a=this,v=a.$createElement,t=a._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"第01天"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第01天"}},[a._v("#")]),a._v(" 第01天")]),a._v(" "),t("h2",{attrs:{id:"常用dos命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用dos命令"}},[a._v("#")]),a._v(" 常用DOS命令")]),a._v(" "),t("blockquote",[t("p",[a._v("dir(directory) 列出当前目录下的文件及文件夹")]),a._v(" "),t("p",[a._v("md(make directory) 创建目录（后面接文件名）")]),a._v(" "),t("p",[a._v("rd 删除目录")]),a._v(" "),t("p",[a._v("cd 进入指定目录")]),a._v(" "),t("p",[a._v("cd.. 退回到上一级目录")]),a._v(" "),t("p",[a._v("cd\\ 退回到根目录")]),a._v(" "),t("p",[a._v("del 删除文件")]),a._v(" "),t("p",[a._v("exit 退出dos命令行")])]),a._v(" "),t("ol",[t("li",[t("p",[a._v(".java文件(源文件)      通过编译(javac.exe)  得到.class文件(字节码文件)  运行(java.exe)后得到结果")])]),a._v(" "),t("li",[t("p",[a._v("使用命令行时配置的classpath会干扰查找文件")])]),a._v(" "),t("li",[t("p",[a._v("注释：\n单行注释：   //\n多行注释：   /*\n"),t("em",[a._v("/(不可嵌套)\n文档注释：   /")]),a._v("*\n*/(只有这个可以被Javadoc解析)")])]),a._v(" "),t("li",[t("p",[a._v("Java API文档（类似于字典）")])]),a._v(" "),t("li",[t("p",[a._v("在一个Java文件中可以声明多个class。但只能最多有一个类声明为public的。")])])]),a._v(" "),t("h1",{attrs:{id:"第02天"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第02天"}},[a._v("#")]),a._v(" 第02天")]),a._v(" "),t("p",[a._v("应用程序   =   算法    +    数据结构")]),a._v(" "),t("h2",{attrs:{id:"保留字及关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#保留字及关键字"}},[a._v("#")]),a._v(" 保留字及关键字")]),a._v(" "),t("p",[a._v("关键字：被java语言赋予特殊的含义，用做专门的用途的字符串(全部为小写)")]),a._v(" "),t("p",[a._v("保留字：以后java版本可能会用(goto, const)")]),a._v(" "),t("p",[a._v("标识符：java对各种变量、方法、类等要素命名时的字符序列(自己可以起名字的地方)(不建议使用汉字)")]),a._v(" "),t("p",[a._v("特点：")]),a._v(" "),t("ol",[t("li",[a._v("由26个英文字母大小写，0-9，或$组成")]),a._v(" "),t("li",[a._v("数字不可以开头")]),a._v(" "),t("li",[a._v("不可以使用关键字和保留字，但能包含关键字和保留字")]),a._v(" "),t("li",[a._v("Java中严格区分大小写，长度无限制")]),a._v(" "),t("li",[a._v("标识符不能包含空格")])]),a._v(" "),t("h2",{attrs:{id:"java-中的名称命名规范"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-中的名称命名规范"}},[a._v("#")]),a._v(" Java 中的名称命名规范:")]),a._v(" "),t("ol",[t("li",[a._v("包名:多单词组成时所有字母都小写: xxyy2zz")]),a._v(" "),t("li",[a._v("类名、接口名:多单词组成时，所有单词的首字母大写: XxxyZzz")]),a._v(" "),t("li",[a._v("变量名、方法名:多单词组成时，第一个单调首字母小写，第二个单词开始每个单词首字母大写: xXyzz")]),a._v(" "),t("li",[a._v("常量名:所有字母都大写。多单词时每个单词用下划线连接: xxx yww. zz2")]),a._v(" "),t("li",[a._v("(起名字最好有意义....)")])]),a._v(" "),t("h2",{attrs:{id:"变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[a._v("#")]),a._v(" 变量")]),a._v(" "),t("ol",[t("li",[a._v("必须声明使用(赋值也是必要的)")]),a._v(" "),t("li",[a._v("使用变量名来访问这块区域的数据")]),a._v(" "),t("li",[a._v("变量的作用域:其定义所在的一对{}内")]),a._v(" "),t("li",[a._v("变量只有在其作用域内才有效")]),a._v(" "),t("li",[a._v("java定义变量的格式:数据类型变量名=变量值;")])]),a._v(" "),t("h3",{attrs:{id:"分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[a._v("#")]),a._v(" 分类")]),a._v(" "),t("p",[a._v("按照数据类型来分:")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("基本数据类型:")]),a._v(" "),t("p",[a._v("整型: byte \\ short \\ int \\ long")]),a._v(" "),t("p",[a._v("浮点型: float \\ double")]),a._v(" "),t("p",[a._v("字符型: char")]),a._v(" "),t("p",[a._v("(布尔型: boolean)")])]),a._v(" "),t("li",[t("p",[a._v("引用数据类型:")]),a._v(" "),t("p",[a._v("类(class)")]),a._v(" "),t("p",[a._v("接口(interface)")]),a._v(" "),t("p",[a._v("数组(array)")])])]),a._v(" "),t("h3",{attrs:{id:"·整型常量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#·整型常量"}},[a._v("#")]),a._v(" ·整型常量")]),a._v(" "),t("ol",[t("li",[a._v("java的整型常量默认为int型，声明long型常量须后加'l'或'L'")]),a._v(" "),t("li",[a._v("java程序中变量通常声明为int型， 除非不足以表示较大的数，才使用long")])]),a._v(" "),t("h3",{attrs:{id:"·浮点类型-float-4字节-、double-8字节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#·浮点类型-float-4字节-、double-8字节"}},[a._v("#")]),a._v(" ·浮点类型: float(4字节)、double(8字节)")]),a._v(" "),t("ol",[t("li",[a._v("float:单精度， 尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。")]),a._v(" "),t("li",[a._v("double:双精度，精度是float的两倍。通常采用此类型。")]),a._v(" "),t("li",[a._v("Java的浮点型常量默认为double型，声明float型常量，须后加'f'或‘F'。")]),a._v(" "),t("li",[a._v("float表示数值的范围比long还大")])]),a._v(" "),t("h3",{attrs:{id:"·字符型-char-1字符-2字节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#·字符型-char-1字符-2字节"}},[a._v("#")]),a._v(" ·字符型: char (1字符=2字节)")]),a._v(" "),t("p",[a._v("定义char型变量，通常使用一对,内部只能写一个字符")]),a._v(" "),t("h4",{attrs:{id:"转义字符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转义字符"}},[a._v("#")]),a._v(" 转义字符")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("\\b|\\n|\\r|\\t|\\\"|\\'|\\\\\n:-:|:-:|:-:|:-:|:-:|:-:|\n退格符|换行符|回车符|制表符|双引号|单引号|反斜线\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("h4",{attrs:{id:"表示方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#表示方式"}},[a._v("#")]),a._v(" 表示方式:")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("声明一个字符")])]),a._v(" "),t("li",[t("p",[a._v("转义字符")])]),a._v(" "),t("li",[t("p",[a._v("直接使用Unicode 值来表示字符型常量\n（Unicode: 一种编码,将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，使用Unicode没有乱码的问题）")]),a._v(" "),t("p",[a._v("（UTF-8是一种变长的编码方式。它可以使用1-6个字节表示一个符号，根据不同的符号而变化字节长度）")])])]),a._v(" "),t("h3",{attrs:{id:"·布尔型-boolean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#·布尔型-boolean"}},[a._v("#")]),a._v(" ·布尔型: boolean")]),a._v(" "),t("ol",[t("li",[a._v("只能取两个值之一: true 、false")]),a._v(" "),t("li",[a._v("常常在条件判断、循环结构中使用")])]),a._v(" "),t("h3",{attrs:{id:"基本数据类型之间的运算规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型之间的运算规则"}},[a._v("#")]),a._v(" 基本数据类型之间的运算规则:")]),a._v(" "),t("p",[a._v("（这里讨论只是7种基本数据类型变量间的运算。不包含boolean类型的）\n"),t("strong",[a._v("当容量小的数据类型的变量与容量大的数据类型的变量做运算时，结果自动提升为容量大的数据类型。")]),a._v("\nbyte、char 、short --\x3e int --\x3e long --\x3e float --\x3e double\n特别的:当byte、 char、 short三种类型的变量做运算时，结果为int型")]),a._v(" "),t("h2",{attrs:{id:"string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[a._v("#")]),a._v(" String")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("String不是 基本数据类型，属于引用数据类型")])]),a._v(" "),t("li",[t("p",[a._v('使用方式与基本数据类型一致。例如: String str =“abcd";')])]),a._v(" "),t("li",[t("p",[a._v("一个字符串可以串接另一个字符串，也可以直接串接其他类型的数据。例如:")]),a._v(" "),t("div",{staticClass:"language-str= str +“xyz”; line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("str = str +“xyz”;\nint n = 100;\nstr = str + n;\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v('声明String类型变量时，使用一对""')])]),a._v(" "),t("li",[t("p",[a._v("String可 以和8种基本数据类型变量做运算，且运算只能是连接运算: +（运算的结果仍然是String类型）")])]),a._v(" "),t("li",[t("p",[a._v("int 无法转换为String")])])]),a._v(" "),t("h2",{attrs:{id:"计算机中不同进制的使用说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#计算机中不同进制的使用说明"}},[a._v("#")]),a._v(" 计算机中不同进制的使用说明")]),a._v(" "),t("p",[a._v("对于整数，有四种表示方式:")]),a._v(" "),t("blockquote",[t("p",[a._v("二进制(binary): 0,1，满2进1.以b或0B开头。")])]),a._v(" "),t("blockquote",[t("p",[a._v("十进制(decimal): 0-9满10进1。")])]),a._v(" "),t("blockquote",[t("p",[a._v("八进制(octal): 0-7，满8进1.以数字0开头表示。")])]),a._v(" "),t("blockquote",[t("p",[a._v("十六进制(hex): 0-9及A-F， 满16进1.以0x或0x开头表示。此处的A-F不区分大小写。如: 0x21AF +1= 0X21B0")])]),a._v(" "),t("p",[a._v("符号位    0：正数    1：负数")]),a._v(" "),t("p",[a._v("计算机底层都以补码的方式来存储数据!")]),a._v(" "),t("h1",{attrs:{id:"第03天"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第03天"}},[a._v("#")]),a._v(" 第03天")]),a._v(" "),t("p",[a._v("(instanceof    检查是否是类的对象)")]),a._v(" "),t("h2",{attrs:{id:"运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[a._v("#")]),a._v(" 运算符")]),a._v(" "),t("h3",{attrs:{id:"比较运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符"}},[a._v("#")]),a._v(" 比较运算符")]),a._v(" "),t("p",[a._v("==  !=  >  <  >=    <=     instanceof\n结论:\n1.比较运算符的结果是boolean类型\n2.区分  == 和  =")]),a._v(" "),t("h3",{attrs:{id:"逻辑运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[a._v("#")]),a._v(" 逻辑运算符")]),a._v(" "),t("p",[a._v("&   逻辑与   &&    短路与(逻辑与全程运算；短路与遇到false就停)")]),a._v(" "),t("p",[a._v("|    逻辑或    ||    短路或(同上)")]),a._v(" "),t("p",[a._v("!     逻辑非     ^     逻辑异或")]),a._v(" "),t("h3",{attrs:{id:"位运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[a._v("#")]),a._v(" 位运算符")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("|    运算符    |  运算          |  范例              |\n|:-----------:|:-------- ----：|:-----------------:|\n|      <<     | 左移           | 3<<2 = 12->3*2*2  |\n|      >>     | 右移           | 3>>1 =1 -> 3/2=1  |\n|      >>>    | 无符号右移      | 3>>>1 = 1 ->3/2=1 |\n|      &      | 与运算         | 6&3 = 2           |\n|      |      | 或运算         | 6|3 = 7           |\n|      ^      | 异或运算        | 6^3 = 5           |\n|      ~      | 取反运算        | ~6 = —7           |\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br")])]),t("p",[t("strong",[a._v("（位运算是直接对整数的二进制的运算）")])]),a._v(" "),t("p",[a._v("结论1.位运算符操作的都是整型的数据")]),a._v(" "),t("p",[a._v("​        2:在一定范围内，每向左移1位，相当于* 2")]),a._v(" "),t("h3",{attrs:{id:"交换数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#交换数据"}},[a._v("#")]),a._v(" （交换数据）")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("//方式一:定义临时变量的方式\nint temp = num1;\nnum1 = num2;\nnum2 = temp;|\n//方式二:好处:不用定义临时变量\n//弊端:①相加操作可能超出存储范围②有局限性:只能适用于数值类型\n//num1 = num1 + num2;\n//num2 = num1 - num2;\n//num1 = num1 - num2;\n//方式三:使用位运算符\n//有局限性:只能适用于数值类型\n//num1 = num1 ^ num2;\n//num2 = num1 ^ num2;\n//num1 = num1 ^ num2;\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br")])]),t("h3",{attrs:{id:"三元运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三元运算符"}},[a._v("#")]),a._v(" 三元运算符")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("结构:")]),a._v(" "),t("blockquote",[t("p",[a._v("(条件表达式)?表达式1 :表达式2")])])]),a._v(" "),t("li",[t("p",[a._v("说明\n①条件表达式的结果为boolean类型\n②根据条件表达式真或假，决定执行表达式1，还是表达式2.\n如果表达式为true,则执行表达式1。\n如果表达式为false,则执行表达式2。\n③表达式1和表达式2要求是一致的。\n④三元运算符可以嵌套使用")])]),a._v(" "),t("li",[t("p",[a._v("凡是可以使用三元运算符的地方，都可以改写为if-else\n反之，不成立。")])]),a._v(" "),t("li",[t("p",[a._v("如果程序既可以使用三元运算符，又可以使用if-else结构，那么优先选择三元运算符。原因:简洁、执行效率高。")])])]),a._v(" "),t("h3",{attrs:{id:"运算符的优先级"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#运算符的优先级"}},[a._v("#")]),a._v(" 运算符的优先级")]),a._v(" "),t("p",[a._v("●运算符有不同的优先级，所谓优先级就是表达式运算中的运算顺序。")]),a._v(" "),t("p",[a._v("●只有单目运算符、三元运算符、赋值运算符是从右向左运算的。")]),a._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("     |. () {} ; , \nR-L  |++ -- ~ !(data type)\nL-R  |* / %\nL-R  |+ -\nL-R  |<< >> >>>\nL-R  |< > <= >= instanceof\nL-R  |== != \nL-R  |&\nL-R  |^\nL-R  ||\nL-R  |&&\nL-R  |||\nR-L  |? :\nR-L  |= *= /= %=\n     |+= -= >>= <<=\n     |>>>= &= ^= |=\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br")])]),t("h2",{attrs:{id:"程序流程控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#程序流程控制"}},[a._v("#")]),a._v(" 程序流程控制")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组\n合成能完成一定功能的小逻辑模块。")])]),a._v(" "),t("li",[t("p",[a._v("其流程控制方式采用结构化程序设计中规定的三种基本流程结构，即:\n-顺序结构\n-分支结构\n-循环结构")])])]),a._v(" "),t("p",[t("strong",[a._v("顺序结构")])]),a._v(" "),t("p",[a._v("-程序从上到下逐行地执行，中间没有任何判断和跳转。")]),a._v(" "),t("p",[t("strong",[a._v("分支结构")])]),a._v(" "),t("p",[a._v("-根据条件，选择性地执行某段代码。\n-有if... else和switch-case两种分支语句。")]),a._v(" "),t("blockquote",[t("p",[a._v("第一种:\nif(条件表达式){\n执行表达式\n第二种:二选一\nif(条件表达式){\n执行表达式1\n}else{\n执行表达式2\n}\n第三种:多选一\nif(条件表达式){\n执行表达式1\n}else if(条件表达式){\n执行表达式2\n}else if(条 件表达式){\n执行表达式3\n}\nelse{}")])]),a._v(" "),t("p",[t("strong",[a._v("循环结构")])]),a._v(" "),t("p",[a._v("-根据循环条件，重复性的执行某段代码。\n-有while、do...while、 for三种 循环语句。\n-注: JDK1.5提供了foreach循环，方便的遍历集合、数组元素。")]),a._v(" "),t("h1",{attrs:{id:"第04天"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第04天"}},[a._v("#")]),a._v(" 第04天")]),a._v(" "),t("h2",{attrs:{id:"scanner"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scanner"}},[a._v("#")]),a._v(" Scanner")]),a._v(" "),t("p",[a._v("如何从键盘获取不同类型的变量：需要使用Scanner类")]),a._v(" "),t("p",[a._v("具体实现步骤：\n1.导包：import java.util.Scanner;\n2.Scanner的实例化:Scanner scan = new Scanner(System.in);\n3.调用Scanner类的相关方法（next() / nextXxx()），来获取指定类型的变量")]),a._v(" "),t("p",[a._v("注意：\n需要根据相应的方法，来输入指定类型的值。如果输入的数据类型与要求的类型不匹配时，会报异常：InputMisMatchException\n导致程序终止。")]),a._v(" "),t("h2",{attrs:{id:"if-else"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-else"}},[a._v("#")]),a._v(" if--else")]),a._v(" "),t("ol",[t("li",[a._v("else 结构是可选的。")]),a._v(" "),t("li",[a._v("针对于条件表达式：\n"),t("ul",[t("li",[a._v("如果多个条件表达式之间是“互斥”关系(或没有交集的关系),哪个判断和执行语句声明在上面还是下面，无所谓。")]),a._v(" "),t("li",[a._v("如果多个条件表达式之间有交集的关系，需要根据实际情况，考虑清楚应该将哪个结构声明在上面。")]),a._v(" "),t("li",[a._v("如果多个条件表达式之间有包含的关系，通常情况下，需要将范围小的声明在范围大的上面。否则，范围小的就没机会执行了。")])])])]),a._v(" "),t("h2",{attrs:{id:"switch-case"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#switch-case"}},[a._v("#")]),a._v(" switch-case")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("格式\nswitch(表达式){\ncase 常量1:\n执行语句1;\n//break;")]),a._v(" "),t("p",[a._v("case 常量2:\n执行语句2;\n//break;")]),a._v(" "),t("p",[a._v("...")]),a._v(" "),t("p",[a._v("default:\n执行语句n;\n//break;")]),a._v(" "),t("p",[a._v("}")])]),a._v(" "),t("li",[t("p",[a._v("说明：\n① 根据switch表达式中的值，依次匹配各个case中的常量。一旦匹配成功，则进入相应case结构中，调用其执行语句。当调用完执行语句以后，则仍然继续向下执行其他case结构中的执行语句，直到遇到break关键字或此switch-case结构末尾结束为止。")]),a._v(" "),t("p",[a._v("② break,可以使用在switch-case结构中，表示一旦执行到此关键字，就跳出switch-case结构")]),a._v(" "),t("p",[a._v("③ switch结构中的表达式，只能是如下的6种数据类型之一：")]),a._v(" "),t("p",[a._v("byte 、short、char、int、枚举类型(JDK5.0新增)、String类型(JDK7.0新增)")]),a._v(" "),t("p",[a._v("④ case 之后只能声明常量。不能声明范围。")]),a._v(" "),t("p",[a._v("⑤ break关键字是可选的。")]),a._v(" "),t("p",[a._v("⑥ default:相当于if-else结构中的else."),t("br"),a._v("\ndefault结构是可选的，而且位置是灵活的")]),a._v(" "),t("p",[a._v("⑦凡是可以使用switch-case的结构，都可以转换为if-else。反之，不成立。")]),a._v(" "),t("p",[a._v("⑧我们写分支结构时，当发现既可以使用switch-case,（同时，switch中表达式的取值情况不太多），\n又可以使用if-else时，我们优先选择使用switch-case。原因：switch-case执行效率稍高。")])])]),a._v(" "),t("h2",{attrs:{id:"循环结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#循环结构"}},[a._v("#")]),a._v(" 循环结构")]),a._v(" "),t("p",[a._v("分为for循环；while循环；do-while循环；")]),a._v(" "),t("p",[a._v("循环语句的四个组成部分：")]),a._v(" "),t("ul",[t("li",[a._v("初始化部分(init_statement)")]),a._v(" "),t("li",[a._v("循环条件部分(test_exp)")]),a._v(" "),t("li",[a._v("循环体部分(body_statement)")]),a._v(" "),t("li",[a._v("迭代部分(alter_statement)")])]),a._v(" "),t("h3",{attrs:{id:"for循环结构的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#for循环结构的使用"}},[a._v("#")]),a._v(" For循环结构的使用")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("循环结构的4个要素\n① 初始化条件\n② 循环条件  ---\x3e是boolean类型\n③ 循环体\n④ 迭代条件")])]),a._v(" "),t("li",[t("p",[a._v("for循环的结构")]),a._v(" "),t("p",[a._v("for(①;②;④){\n③")]),a._v(" "),t("p",[a._v("}")]),a._v(" "),t("p",[a._v("执行过程：① - ② - ③ - ④ - ② - ③ - ④ - ... - ②")])])]),a._v(" "),t("h1",{attrs:{id:"第05天"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第05天"}},[a._v("#")]),a._v(" 第05天")]),a._v(" "),t("h3",{attrs:{id:"while-循环的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#while-循环的使用"}},[a._v("#")]),a._v(" While 循环的使用")]),a._v(" "),t("p",[a._v("一、循环结构的4个要素\n① 初始化条件\n② 循环条件  ---\x3e是boolean类型\n③ 循环体\n④ 迭代条件")]),a._v(" "),t("p",[a._v("二、while循环的结构")]),a._v(" "),t("p",[a._v("①\nwhile(②){\n③;\n④;\n}")]),a._v(" "),t("p",[a._v("执行过程：① - ② - ③ - ④ - ② - ③ - ④ - ... - ②")]),a._v(" "),t("p",[a._v("说明：\n1.写while循环千万小心不要丢了迭代条件。一旦丢了，就可能导致死循环！\n2.我们写程序，要避免出现死循环。\n3.for循环和while循环是可以相互转换的！\n区别：for循环和while循环的初始化条件部分的作用范围不同。")]),a._v(" "),t("p",[a._v("算法：有限性。")]),a._v(" "),t("h3",{attrs:{id:"do-while循环的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#do-while循环的使用"}},[a._v("#")]),a._v(" do-while循环的使用")]),a._v(" "),t("p",[a._v("一、循环结构的4个要素\n① 初始化条件\n② 循环条件  ---\x3e是boolean类型\n③ 循环体\n④ 迭代条件")]),a._v(" "),t("p",[a._v("二、do-while循环结构：")]),a._v(" "),t("p",[a._v("①\ndo{\n③;\n④;")]),a._v(" "),t("p",[a._v("}while(②);")]),a._v(" "),t("p",[a._v("执行过程：① - ③ - ④ - ② - ③ - ④ - ... - ②")]),a._v(" "),t("p",[a._v("说明：\n1.do-while循环至少会执行一次循环体！\n2.开发中，使用for和while更多一些。较少使用do-while")]),a._v(" "),t("h3",{attrs:{id:"嵌套循环的使用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#嵌套循环的使用"}},[a._v("#")]),a._v(" 嵌套循环的使用")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("嵌套循环：将一个循环结构A声明在另一个循环结构B的循环体中,就构成了嵌套循环")])]),a._v(" "),t("li",[t("p",[a._v("外层循环：循环结构B\n内层循环：循环结构A")])]),a._v(" "),t("li",[t("p",[a._v("说明\n① 内层循环结构遍历一遍，只相当于外层循环循环体执行了一次\n② 假设外层循环需要执行m次，内层循环需要执行n次。此时内层循环的循环体一共执行了m * n次")])]),a._v(" "),t("li",[t("p",[a._v("技巧：\n外层循环控制行数，内层循环控制列数")])])]),a._v(" "),t("h3",{attrs:{id:"break和continue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#break和continue"}},[a._v("#")]),a._v(" break和continue")]),a._v(" "),t("p",[a._v("​\t\t\t\t         使用范围\t      \t\t循环中使用的作用(不同点)\t\t相同点\nbreak:\t\t  \tswitch-case\t\t\t\n​\t\t\t         \t或循环结构中\t\t\t结束当前循环\t\t\t\t\t      关键字后面不能声明执行语句")]),a._v(" "),t("p",[a._v("continue:\t\t循环结构中\t\t    \t结束当次循环\t\t\t\t      \t关键字后面不能声明执行语句")]),a._v(" "),t("h3",{attrs:{id:"附"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#附"}},[a._v("#")]),a._v(" 附")]),a._v(" "),t("p",[a._v("Utility工具类：")]),a._v(" "),t("p",[a._v("将不同的功能封装为方法，就是可以直接通过调用方法使用它的功能，而无需考虑具体的功能实现细节。")]),a._v(" "),t("h1",{attrs:{id:"第06天"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#第06天"}},[a._v("#")]),a._v(" 第06天")]),a._v(" "),t("h2",{attrs:{id:"数组的概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数组的概述"}},[a._v("#")]),a._v(" 数组的概述")]),a._v(" "),t("p",[t("strong",[a._v("数组的理解")]),a._v(" ：数组(ARRAY)，是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，")]),a._v(" "),t("p",[a._v("并通过编号的方式对这些数据进行统一管理。")]),a._v(" "),t("p",[t("strong",[a._v("数组的特点：")])]),a._v(" "),t("ol",[t("li",[a._v("数组是有序排列的")]),a._v(" "),t("li",[a._v("数组属于引用数据类型的变量。数组的元素，既可以是基本数据类型，也可以是引用数据类型")]),a._v(" "),t("li",[a._v("创建数组对象会在内存中开辟一整块连续的空间")]),a._v(" "),t("li",[a._v("数组的长度一旦确定，就不能修改。")])]),a._v(" "),t("p",[t("strong",[a._v("数组的分类：")])]),a._v(" "),t("p",[a._v("① 按照维数：一维数组、二维数组、。。。")]),a._v(" "),t("p",[a._v("② 按照数组元素的类型：基本数据类型元素的数组、引用数据类型元素的数组")]),a._v(" "),t("p",[t("strong",[a._v("数组元素的默认初始化值")])]),a._v(" "),t("ol",[t("li",[a._v("数组元素是整型：0")]),a._v(" "),t("li",[a._v("数组元素是浮点型：0.0")]),a._v(" "),t("li",[a._v("数组元素是char型：0或'\\u0000'，而非'0'")]),a._v(" "),t("li",[a._v("数组元素是boolean型：false")]),a._v(" "),t("li",[a._v("数组元素是引用数据类型：null")])]),a._v(" "),t("p",[t("strong",[a._v("二维数组的使用")])]),a._v(" "),t("p",[a._v("对于二维数组的理解，我们可以看成是一维数组array1又作为另一个一维数组array2的元素而存在。")]),a._v(" "),t("p",[a._v("从数组底层的运行机制来看，其实没有多维数组。")]),a._v(" "),t("p",[a._v("规定：")]),a._v(" "),t("p",[a._v("二维数组分为外层数组的元素，内层数组的元素")]),a._v(" "),t("p",[t("code",[a._v("int[][] arr = new int[4][3];")])]),a._v(" "),t("p",[a._v("外层元素："),t("code",[a._v("arr[0],arr[1]")]),a._v("等")]),a._v(" "),t("p",[a._v("内层元素："),t("code",[a._v("arr[0][0],arr[1][2]")]),a._v("等")]),a._v(" "),t("p",[a._v("⑤ 数组元素的默认初始化值")]),a._v(" "),t("p",[a._v("针对于初始化方式一：比如："),t("code",[a._v("int[][] arr = new int[4][3];")])]),a._v(" "),t("p",[a._v("外层元素的初始化值为：地址值")]),a._v(" "),t("p",[a._v("内层元素的初始化值为：与一维数组初始化情况相同")]),a._v(" "),t("p",[a._v("针对于初始化方式二：比如："),t("code",[a._v("int[][] arr = new int[4][];")])]),a._v(" "),t("p",[a._v("外层元素的初始化值为：null")]),a._v(" "),t("p",[a._v("内层元素的初始化值为：不能调用，否则报错。")])])}),[],!1,null,null,null);v.default=s.exports}}]);